# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio = [0, 4, 4]
sort_by = "alphabetical"
linemode = "size"
mouse_events = []

[plugin]
prepend_fetchers = [
	{ id = "mime", name = "*", if = "!mime", run = "mime-ext", prio = "high" },
]
prepend_previewers = [
	{ id = "video", mime = "video/*", run = "noop", prio = "high" },
]
prepend_preloaders = [
	{ id = "video", mime = "video/*", run = "noop", prio = "high" },
]

[preview]
max_width = 4000
max_height = 4000
image_delay = 100
image_quality = 50
image_filter = 'lanczos3'

[opener]
play = [
	{ run = 'mpv --force-window --use-filedir-conf "$@" >& /dev/null & disown', orphan = true, for = "unix" },
	{ run = 'mpv --force-window "%1"', orphan = true, for = "windows" },
	{ run = 'ffprobe -hide_banner "$1"; echo "Press enter to exit"; read _', block = true, desc = "Show media info", for = "unix" },
]
asar = [
	{ run = 'asar extract "$1"', desc = "Extract here", for = "unix" },
	{ run = 'asar extract "$1" "${1%.*}" ', desc = "Extract subfolder", for = "unix" },
]
rar = [
	{ run = 'unar "$1"', desc = "Extract here", for = "unix" },
	{ run = 'unar -output-directory "${1%.*}" "$1"', desc = "Extract subfolder", for = "unix" },
]
tar = [
	{ run = 'tar -xf "$1"', desc = "Extract here", for = "unix" },
	{ run = 'mkdir "${1%.*}" && tar -C "${1%.*}" -xf "$1"', desc = "Extract subfolder", for = "unix" },
]
extract = [
	{ run = '7z -bsp1 x "$1"', desc = "Extract here", for = "unix" },
	{ run = '7z -bsp1 -o"${1%.*}" x "$1"', desc = "Extract subfolder", for = "unix" },
]
zip-folder = [
	{ run = 'cd "$1" && 7z a "${1}.7z" .', desc = "7z", for = "unix" },
]
extract-iso = [
	{ run = '7z x -tiso -o"${1%.*}" "$1"', desc = "Extract iso subfolder", for = "unix" },
]
unrpa = [
	{ run = 'unrpa "$1" --mkdir --path "${1%.*}"', desc = "unrpa to subfolder", for = "unix" },
]
denoise = [
	{ run = 'ffmpeg -i "$1" -af anlmdn -y "${1%.*}.denoised.${1##*.}"', desc = "apply denoise filter", for = "unix" },
]
rpgmv-decrypt = [
	{ run = '[[ -d "$(pwd)/www" ]] && rpgmv-decrypter "$(pwd)/www" || rpgmv-decrypter "$(pwd)"', desc = "Decrypt rpgmaker folder", for = "unix" },
]
unity-decrypt = [
	{ run = 'AssetStudioModCLI "$(pwd)" -m Export -t sprite -o "./$(basename "$(find . -name "*_Data")")_Exported"', desc = "Extract unity assets", for = "unix" },
]
feh = [{ run = 'feh "$@"', desc = "Show images with feh", for = "unix" }]
images = [
	{ run = '''
    find "$1" -type d -print0 | xargs -0 feh --title "%f [%u/%l] %wx%h"
  ''', desc = "Show images in folders recursively", for = "unix" },
	{ run = '''
    find "$1" \( -name "*.png" -o -name ".jp*g" \) -print0 | while IFS= read -r -d '' img; do
      dimensions=$(identify -format "%w %h" "$img" 2>/dev/null)
      if [[ $? -eq 0 ]]; then
        read width height <<< "$dimensions"

        if [[ $width -ge 600 && $height -ge 400 ]]; then
            printf "%s\0" "$img"
        fi
      fi
    done | sort -z -n | xargs -0 feh --title "%f [%u/%l] %wx%h"
  ''', desc = "Show images bigger than 600x400 in folders recursively", for = "unix" },
]
adb-install = [
	{ run = 'adb install "$1"', desc = "Install app to phone through adb", for = "unix" },
]
exe = [
	{ run = 'ghidra "$1" >& /dev/null & disown', desc = "Open in ghidra", for = "unix" },
	{ run = 'wine "$1" >& /dev/null & disown', desc = "Run under wine", for = "unix" },
]
libreoffice = [
	{ run = 'libreoffice "$1" >& /dev/null & disown', desc = "Open in libreoffice", for = "unix" },
]
dnspy = [
	{ run = 'dnspy "$1"', desc = "DNSPY", for = "unix" },
]
osu = [
	{ run = 'osu "$@"', desc = "osu!lazer", for = "unix" },
]
evbunpack = [
	{ run = 'evbunpack "$1" unpack', desc = "Unpack enigma executable", for = "unix" },
]
gimp = [
	{ run = 'gimp "$@"', desc = "GIMP", for = "unix" },
]
wallpaper = [
  { run = 'echo -e "preload = $1\nwallpaper = ,$1" > ~/.config/hypr/hyprpaper.conf && hyprctl hyprpaper reload ,"$1"', desc = 'Set wallpaper (hyprland)', for = 'unix' }
]

[open]
prepend_rules = [
	# Game shortcuts
	{ name = "*.dll", use = ["dnspy"] },
	{ name = "*Game.exe", use = ["rpgmv-decrypt", "evbunpack"] },
	{ name = "*Game.rpgproject", use = ["rpgmv-decrypt"] },
	{ name = "*nw", use = ["rpgmv-decrypt"] },
	{ name = "*_Data/", use = ["unity-decrypt"] },
	{ name = "*.rpa", use = ["unrpa"] },
	{ name = "*.apk", use = ["adb-install", "extract"] },

	{ name = "*.psd", use = ["gimp"] },

	{ name = "*.{mkv,mp4}", use = ["play", "denoise"] },
	{ name = "*.gif", use = ["play"] },

	{ name = "*.os{z,k}", use = ["osu", "extract"] },

	{ name = "*.tar*", use = ["tar"] },
	{ name = "*.rar", use = ["rar"] },

	{ name = "*.asar", use = ["asar"] },

	{ name = "*.exe", use = ["exe"] },

	{ name = "*.iso", use = ["extract-iso"] },

	{ name = "*.{pdf,docx,doc}", use = ["libreoffice"] },

	{ mime = "image/*", use = ["feh", "wallpaper", "gimp"] },
]
append_rules = [{ name = "*/", use = ["images", "zip-folder"] }]